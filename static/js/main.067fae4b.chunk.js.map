{"version":3,"sources":["store/Store.js","utils/classNames.ts","utils/Conveter.js","utils/GeneratedCheck.js","components/SudokuBoard/SudokuTile/SudokuTile.js","store/types.js","components/SudokuBoard/SudokuUnit/BoardUnit.js","components/SudokuBoard/SudokuBoard.js","components/NumPad/NumPad.js","components/SideControls/Timer.js","components/SideControls/Modal.js","components/SideControls/SideControls.js","images/pepeScrap.png","utils/GetRemainingNums.js","components/App/App.js","utils/BoardGenerator.js","store/GameReducer.js","index.js"],"names":["Store","createContext","displayName","useStore","useContext","StoreProvider","children","initialState","reducer","useReducer","globalState","dispatch","Provider","value","classNames","classes","filter","Boolean","join","getRowNum","row","generatedCheck","tile","initBoardState","parseInt","col","Tile","props","state","selectedTile","tileValue","className","id","tileId","onClick","e","selectTileHandler","actionTypes","BoardUnit","boardState","tileProps","type","getValue","unit","rowNum","tileArray","i","rows","substring","j","cols","push","tiles","SudokuBoard","NumPad","remainingNums","btnHandler","Timer","Math","floor","time","slice","Modal","open","onClose","SideControls","useState","setTime","isSolved","undoState","isOpen","setIsOpen","useEffect","interval","setInterval","clearInterval","newBoardState","newUndoState","length","pop","undoHandler","remainingValues","one","two","three","four","five","six","seven","eight","nine","counter","App","solvedBoardState","checkWin","btnValue","numInput","splice","updateTile","src","PepeScrap","alt","BLANK_BOARD","CheckValue","board","column","CheckRow","CheckColumn","tempRow","tempColumn","CheckSquare","numArr","Shuffle","arr","newArr","random","GetRandomNumber","min","max","ceil","FillBoard","initialBoard","nextEmptySpot","EmptySpot","num","randNumArr","Error","FillFromArray","emptySpotArr","emptySpot","NextStillEmptySpot","ValueRemover","k","removedVals","val","start","end","Array","from","_","RangeOfNum","nextVal","undefined","randRow","randCol","moreThanOneSolution","JSON","parse","stringify","proposedBoard","emptySpotClone","thisSolution","possibleSolutions","returnArr","EmptySpotCoords","index","startingPoint","unshift","Set","NewFilledBoard","newBoard","BeginnerBoardGenerator","numTiles","finalBoard","error","startingBoard","map","inner","copy","ReactDOM","render","StrictMode","action","concat","document","getElementById"],"mappings":"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","file":"static/js/main.067fae4b.chunk.js","sourcesContent":["import React , {createContext, useContext, useReducer} from 'react';\r\n\r\nconst Store = createContext();\r\nStore.displayName = 'Store';\r\n\r\nexport const useStore = () => useContext(Store);\r\n\r\nexport const StoreProvider = ({ children, initialState, reducer }) => {\r\n  const [globalState, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <Store.Provider value={[globalState, dispatch]} displayName=\"Game Context\">{children}</Store.Provider>\r\n  );\r\n};","/**\r\n * @example\r\n *\r\n * import { classNames } from 'lib/classNames';\r\n *\r\n * <button\r\n *   className={classNames(\r\n *     'this is always applied',\r\n *     isTruthy && 'this only when the isTruthy is truthy',\r\n *     active ? 'active classes' : 'inactive classes'\r\n * )}>\r\n *   Text\r\n * </button>\r\n */\r\nexport const classNames = (\r\n  ...classes: (false | null | undefined | string)[]\r\n): string => {\r\n  return classes.filter(Boolean).join(\" \");\r\n};\r\n","export const getRowNum = (row) => {\r\n  switch (row) {\r\n    case \"A\":\r\n      return 1;\r\n    case \"B\":\r\n      return 2;\r\n    case \"C\":\r\n      return 3;\r\n    case \"D\":\r\n      return 4;\r\n    case \"E\":\r\n      return 5;\r\n    case \"F\":\r\n      return 6;\r\n    case \"G\":\r\n      return 7;\r\n    case \"H\":\r\n      return 8;\r\n    case \"I\":\r\n      return 9;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nexport const getColWord = (col) => {\r\n  switch (col) {\r\n    case \"1\":\r\n      return \"one\";\r\n    case \"2\":\r\n      return \"two\";\r\n    case \"3\":\r\n      return \"three\";\r\n    case \"4\":\r\n      return \"four\";\r\n    case \"5\":\r\n      return \"five\";\r\n    case \"6\":\r\n      return \"six\";\r\n    case \"7\":\r\n      return \"seven\";\r\n    case \"8\":\r\n      return \"eight\";\r\n    case \"9\":\r\n      return \"nine\";\r\n    default:\r\n      break;\r\n  }\r\n};\r\n","import { getRowNum } from \"./Conveter\";\r\n\r\nexport const generatedCheck = (tile, initBoardState) => {\r\n  const rowNum = getRowNum(tile.row);\r\n  if(initBoardState[rowNum -1][parseInt(tile.col) - 1] === 0){\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n","import \"./SudokuTile.css\";\r\nimport React from \"react\";\r\nimport { useStore } from \"../../../store/Store\";\r\nimport { classNames } from \"../../../utils/classNames.ts\";\r\nimport { generatedCheck } from \"../../../utils/GeneratedCheck\";\r\nconst Tile = (props) => {\r\n  const [state] = useStore();\r\n  const { selectedTile, initBoardState} = state;\r\n\r\n  let tileValue = \"\";\r\n  let tile = {\r\n    row: props.row,\r\n    col: props.col\r\n  }\r\n  if(generatedCheck(tile,initBoardState)){\r\n    if (props.value === 0) {\r\n      tileValue = \" \";\r\n      return (\r\n        <div\r\n          className=\"tile\"\r\n          id={props.tileId}\r\n          onClick={(e) => {\r\n            props.selectTileHandler(props);\r\n          }}\r\n        >\r\n          <div\r\n            className={classNames(\r\n              \"value-container\",\r\n              \"board-tile\",\r\n              props.row === selectedTile.row &&\r\n                props.col === selectedTile.col &&\r\n                \"selected-tile-class\",\r\n              props.row === selectedTile.row && \"selected-row-class\",\r\n              props.col === selectedTile.col && \"selected-col-class\"\r\n              \r\n            )}\r\n          >\r\n            {tileValue}\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      tileValue = props.value;\r\n      return (\r\n        <div\r\n          className=\"tile\"\r\n          id={props.tileId}\r\n          onClick={(e) => {\r\n            props.selectTileHandler(props);\r\n          }}\r\n        >\r\n          <div\r\n            className={classNames(\r\n              \"value-container\",\r\n              \"board-tile\",\r\n              props.row === selectedTile.row &&\r\n                props.col === selectedTile.col &&\r\n                \"selected-tile-class\",\r\n              props.row === selectedTile.row && \"selected-row-class\",\r\n              props.col === selectedTile.col && \"selected-col-class\",\r\n              props.value === selectedTile.value && \"selected-value-class\"\r\n            )}\r\n          >\r\n            {tileValue}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  } else {\r\n    if (props.value === 0) {\r\n      tileValue = \" \";\r\n      return (\r\n        <div\r\n          className=\"tile\"\r\n          id={props.tileId}\r\n          onClick={(e) => {\r\n            props.selectTileHandler(props);\r\n          }}\r\n        >\r\n          <div\r\n            className={classNames(\r\n              \"value-container\",\r\n              \"user-tile\",\r\n              props.row === selectedTile.row &&\r\n                props.col === selectedTile.col &&\r\n                \"selected-tile-class\",\r\n              props.row === selectedTile.row && \"selected-row-class\",\r\n              props.col === selectedTile.col && \"selected-col-class\"\r\n              \r\n            )}\r\n          >\r\n            {tileValue}\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      tileValue = props.value;\r\n      return (\r\n        <div\r\n          className=\"tile\"\r\n          id={props.tileId}\r\n          onClick={(e) => {\r\n            props.selectTileHandler(props);\r\n          }}\r\n        >\r\n          <div\r\n            className={classNames(\r\n              \"value-container\",\r\n              \"user-tile\",\r\n              props.row === selectedTile.row &&\r\n                props.col === selectedTile.col &&\r\n                \"selected-tile-class\",\r\n              props.row === selectedTile.row && \"selected-row-class\",\r\n              props.col === selectedTile.col && \"selected-col-class\",\r\n              props.value === selectedTile.value && \"selected-value-class\"\r\n            )}\r\n          >\r\n            {tileValue}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  \r\n};\r\n\r\nexport default Tile;\r\n","export const actionTypes = {\r\n    SELECT_TILE : 'SELECT_TILE',\r\n    UPDATE_TILE_VALUE : 'UPDATE_TILE_VALUE',\r\n    UNDO_MOVE: 'UNDO_MOVE'\r\n}","import React from \"react\";\r\nimport \"./BoardUnit.css\";\r\nimport Tile from \"../SudokuTile/SudokuTile\";\r\nimport { useStore } from \"../../../store/Store\";\r\nimport { actionTypes } from \"../../../store/types\";\r\nimport { getRowNum } from \"../../../utils/Conveter\";\r\nimport { classNames } from \"../../../utils/classNames\";\r\n\r\nconst BoardUnit = (props) => {\r\n  const [state, dispatch] = useStore();\r\n  const { boardState, selectedTile } = state;\r\n\r\n  const selectTileHandler = (tileProps) => {\r\n    dispatch({\r\n      type: actionTypes.SELECT_TILE,\r\n      selectedTile: {\r\n        row: tileProps.row,\r\n        col: tileProps.col,\r\n        value: getValue(tileProps.row, tileProps.col),\r\n        unit: props.id,\r\n      },\r\n    });\r\n  };\r\n\r\n  const getValue = (row, col) => {\r\n    const rowNum = getRowNum(row);\r\n    return boardState[rowNum - 1][col - 1];\r\n  };\r\n  \r\n  const tiles = () => {\r\n    const tileArray = [];\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      const row = props.rows.substring(i, i + 1);\r\n      for (let j = 0; j < 3; j++) {\r\n        const col = props.cols.substring(j, j + 1);\r\n        const tileId = \"tile\" + row + col;\r\n        const value = getValue(row, col);\r\n        tileArray.push(\r\n          <Tile\r\n            row={row}\r\n            col={col}\r\n            tileId={tileId}\r\n            value={value}\r\n            selectTileHandler={selectTileHandler}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return tileArray;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      key={props.id}\r\n      id={props.id}\r\n      className={classNames(\r\n        \"board-unit\",\r\n        props.id === selectedTile.unit && \"selected-unit-class\"\r\n      )}\r\n    >\r\n      {tiles()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardUnit;\r\n","import \"./SudokuBoard.css\";\r\nimport React from \"react\";\r\nimport BoardUnit from \"./SudokuUnit/BoardUnit\";\r\n\r\nconst SudokuBoard = (props) => {\r\n  \r\n  return (\r\n    <div className=\"Board-container\">\r\n      <BoardUnit id=\"unit1\" cols=\"123\" rows=\"ABC\" />\r\n      <BoardUnit id=\"unit2\" cols=\"456\" rows=\"ABC\" />\r\n      <BoardUnit id=\"unit3\" cols=\"789\" rows=\"ABC\" />\r\n      <BoardUnit id=\"unit4\" cols=\"123\" rows=\"DEF\" />\r\n      <BoardUnit id=\"unit5\" cols=\"456\" rows=\"DEF\" />\r\n      <BoardUnit id=\"unit6\" cols=\"789\" rows=\"DEF\" />\r\n      <BoardUnit id=\"unit7\" cols=\"123\" rows=\"GHI\" />\r\n      <BoardUnit id=\"unit8\" cols=\"456\" rows=\"GHI\" />\r\n      <BoardUnit id=\"unit9\" cols=\"789\" rows=\"GHI\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SudokuBoard;\r\n","import React from 'react'\r\nimport './NumPad.css'\r\nimport { useStore } from \"../../store/Store\";\r\n\r\nconst NumPad =(props) => {\r\n    const [state] = useStore();\r\n  const { remainingNums } = state;\r\n\r\n\r\n    return (\r\n        <div className=\"NumPad\">\r\n            <button className=\"circle-btn\" onClick={(e)=>{props.btnHandler(1)}}>\r\n                <span className=\"number-span\">1</span>\r\n                <span className=\"remaining-span\">{remainingNums[0]}</span>\r\n            </button>\r\n            <button className=\"circle-btn\" onClick={(e)=>{props.btnHandler(2)}}>\r\n                <span className=\"number-span\">2</span>\r\n                <span className=\"remaining-span\">{remainingNums[1]}</span>\r\n            </button>\r\n            <button className=\"circle-btn\" onClick={(e)=>{props.btnHandler(3)}}>\r\n                <span className=\"number-span\">3</span>\r\n                <span className=\"remaining-span\">{remainingNums[2]}</span>\r\n            </button>\r\n            <button className=\"circle-btn\" onClick={(e)=>{props.btnHandler(4)}}>\r\n                <span className=\"number-span\">4</span>\r\n                <span className=\"remaining-span\">{remainingNums[3]}</span>\r\n            </button>\r\n            <button className=\"circle-btn\" onClick={(e)=>{props.btnHandler(5)}}>\r\n                <span className=\"number-span\">5</span>\r\n                <span className=\"remaining-span\">{remainingNums[4]}</span>\r\n            </button>\r\n            <button className=\"circle-btn\" onClick={(e)=>{props.btnHandler(6)}}>\r\n                <span className=\"number-span\">6</span>\r\n                <span className=\"remaining-span\">{remainingNums[5]}</span>\r\n            </button>\r\n            <button className=\"circle-btn\" onClick={(e)=>{props.btnHandler(7)}}>\r\n                <span className=\"number-span\">7</span>\r\n                <span className=\"remaining-span\">{remainingNums[6]}</span>\r\n            </button>\r\n            <button className=\"circle-btn\" onClick={(e)=>{props.btnHandler(8)}}>\r\n                <span className=\"number-span\">8</span>\r\n                <span className=\"remaining-span\">{remainingNums[7]}</span>\r\n            </button>\r\n            <button className=\"circle-btn\" onClick={(e)=>{props.btnHandler(9)}}>\r\n                <span className=\"number-span\">9</span>\r\n                <span className=\"remaining-span\">{remainingNums[8]}</span>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NumPad;","import React from \"react\";\r\nimport './Timer.css';\r\n\r\nconst Timer = (props) => {\r\n  return (\r\n      <div className=\"timer\">\r\n        <span className=\"digits\">\r\n          {(\"0\" + Math.floor((props.time / 60) % 60)).slice(-2)}:\r\n        </span>\r\n        <span className=\"digits\">\r\n          {(\"0\" + Math.floor((props.time ) % 60)).slice(-2)}\r\n        </span>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React, { useState } from \"react\";\r\n//import reactDom from \"react-dom\";\r\nimport './Modal.css';\r\nimport './SideControls.css';\r\n\r\nexport default function Modal({ open, children, onClose }) {\r\n\r\n    if (!open) return null;\r\n    \r\n    return (\r\n        <>\r\n            <div>\r\n                <button className='close' onClick={onClose}>x</button>\r\n                {children}\r\n            </div>\r\n        </>\r\n    );   \r\n}","import React, { useState, useEffect } from \"react\";\r\nimport Timer from \"./Timer\";\r\nimport \"./SideControls.css\";\r\nimport { useStore } from \"../../store/Store\";\r\nimport { actionTypes } from \"../../store/types\";\r\nimport \"./Modal.css\";\r\nimport Modal from './Modal'\r\n\r\nexport default function SideControls(props) {\r\n  const [time, setTime] = useState(0);\r\n  const [state, dispatch] = useStore();\r\n  const {boardState,  isSolved, undoState } = state;\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if ( isSolved === false) {\r\n      interval = setInterval(() => {\r\n        setTime((time) => time + 1);\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [isSolved]);\r\n\r\n  const handleStart = () => {\r\n    \r\n  };\r\n\r\n  const handleReset = () => {\r\n    setTime(0);\r\n  };\r\n\r\n  const undoHandler = () => {\r\n    let newBoardState = [...boardState]\r\n    let newUndoState = [...undoState];\r\n    if(newUndoState.length > 1) {\r\n      newBoardState = newUndoState.pop();\r\n      dispatch({\r\n        type: actionTypes.UNDO_MOVE,\r\n        boardState: newBoardState,\r\n        undoState: newUndoState\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"side-controls\">\r\n      <div className=\"timer-container\">\r\n        <div className=\"timer-item\">\r\n          <h3>EASY</h3>\r\n        </div>\r\n        <div className=\"timer-item\">\r\n          <Timer time={time} />\r\n        </div>\r\n      </div>\r\n      <div className=\"controls-container\">\r\n        <button className=\"undo-btn\" onClick={(e)=>{undoHandler()}}>Undo</button>\r\n        <button className=\"hint-btn\">Hint</button>\r\n        <button className=\"notes-btn\">Notes</button>\r\n        <button className=\"eraser-btn\">Eraser</button>\r\n        <button className=\"new-game-btn\">New Game</button>\r\n        <button className=\"settings-btn\" onClick={() => setIsOpen(true)}>Settings</button>\r\n        <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n            <div className=\"side-modal\">\r\n              <div className=\"side-modal-header\">Settings</div>\r\n              <div className=\"side-modal-text\">Example</div>\r\n            </div>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/pepeScrap.f374ebdc.png\";","export function remainingValues(boardState) {\r\n  let i, j;\r\n  let one = 9,\r\n    two = 9,\r\n    three = 9,\r\n    four = 9,\r\n    five = 9,\r\n    six = 9,\r\n    seven = 9,\r\n    eight = 9,\r\n    nine = 9;\r\n  for (i = 0; i < 9; i++) {\r\n    for (j = 0; j < 9; j++) {\r\n      if (boardState[i][j] === 1) one--;\r\n      if (boardState[i][j] === 2) two--;\r\n      if (boardState[i][j] === 3) three--;\r\n      if (boardState[i][j] === 4) four--;\r\n      if (boardState[i][j] === 5) five--;\r\n      if (boardState[i][j] === 6) six--;\r\n      if (boardState[i][j] === 7) seven--;\r\n      if (boardState[i][j] === 8) eight--;\r\n      if (boardState[i][j] === 9) nine--;\r\n    }\r\n  }\r\n\r\n  const playableVals = [one, two, three, four, five, six, seven, eight, nine];\r\n\r\n  return playableVals;\r\n}\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport SudokuBoard from \"../SudokuBoard/SudokuBoard\";\r\nimport NumPad from \"../NumPad/NumPad\";\r\nimport SideControls from \"../SideControls/SideControls\";\r\nimport PepeScrap from \"../../images/pepeScrap.png\";\r\nimport { useStore } from \"../../store/Store\";\r\nimport { actionTypes } from \"../../store/types\";\r\nimport { getRowNum } from \"../../utils/Conveter\";\r\nimport { remainingValues } from \"../../utils/GetRemainingNums\";\r\nimport { generatedCheck } from \"../../utils/GeneratedCheck\";\r\n\r\nconst App = () => {\r\n  const [state, dispatch] = useStore();\r\n  const { boardState, solvedBoardState, selectedTile, undoState, initBoardState } = state;\r\n\r\n  const updateTile = (numInput) => {\r\n    let newBoardState = [...boardState];\r\n\r\n    if (!generatedCheck(selectedTile, initBoardState)) {\r\n      const rowNum = getRowNum(selectedTile.row);\r\n      newBoardState[rowNum - 1][parseInt(selectedTile.col) - 1] = numInput;\r\n\r\n      if (undoState.length > 15) {\r\n        undoState.splice(0, 1);\r\n      }\r\n      \r\n      const isSolved = checkWin(newBoardState);\r\n      const remainingNums = remainingValues(newBoardState);\r\n      dispatch({\r\n        type: actionTypes.UPDATE_TILE_VALUE,\r\n        boardState: newBoardState,\r\n        remainingNums: remainingNums,\r\n        selectedTile: {\r\n          row: selectedTile.row,\r\n          col: selectedTile.col,\r\n          unit: selectedTile.unit,\r\n          value: numInput,\r\n        },\r\n        isSolved: isSolved,\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkWin = (boardState) => {\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        if (boardState[i][j] !== solvedBoardState[i][j]) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const btnUpdateTileHandler = (btnValue) => {\r\n    updateTile(btnValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex content-center justify-center App bg-primary \">\r\n      <div className=\"flex-auto w-2/3 justify-self-center max-w-2/3 App-container bg-secondary\">\r\n        <header className=\"App-header\">\r\n          <div className=\"text-8xl tracking-header header-title text-bold text-primary\">\r\n            SUDOKU\r\n          </div>\r\n        </header>\r\n        <div className=\"Game-container\">\r\n          <SudokuBoard />\r\n          <NumPad btnHandler={btnUpdateTileHandler} />\r\n          <SideControls />\r\n          <div className=\"image-container\">\r\n            <img src={PepeScrap} alt=\"pepe scrappy\" className=\"pepe-scrap\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","/* This file contains all the functions used to generate a unique board\r\n    with only one solution. All functions were made by Spencer Smith and\r\n    Anna Fortenberry.\r\n*/\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////\r\n/* Contains the blank starting board as well as the functions to check rows, columns and squares\r\n    to see if a value can be placed at the tile at question\r\n*/\r\nexport const BLANK_BOARD = [\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n];\r\n\r\nexport function EmptySpot(board) {\r\n  // checks for the next empty spot in the board\r\n\r\n  for (var i = 0; i < board.length; i++) {\r\n    for (var j = 0; j < board[i].length; j++) {\r\n      if (board[i][j] === 0) return [i, j];\r\n    }\r\n  }\r\n  return [-1, -1];\r\n}\r\n\r\nexport function CheckRow(board, row, value) {\r\n  /*takes in row for the value at question\r\n    gets the value from the row and column and sets it equal to 'testValue'\r\n    iterates through the row to check for any conflictions\r\n    */\r\n\r\n  for (var i = 0; i < 8; i++) {\r\n    if (board[row][i] === value) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function CheckColumn(board, column, value) {\r\n  /*\r\n    takes the board, column and value as parameters\r\n    gets the value at question from the row and column and sets it equal to 'testValue'\r\n    iterates through the column to check for any conflictions\r\n    */\r\n\r\n  for (var i = 0; i < 8; i++) {\r\n    if (board[i][column] === value) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function CheckSquare(board, row, column, value) {\r\n  /*\r\n    take the board, row, and column as parameters\r\n    gets the value at question from the row and column\r\n    iterates through the square from the row and column\r\n    */\r\n\r\n  //get the most upper row of the sqaure\r\n  var tempRow = Math.floor(row / 3);\r\n  tempRow = tempRow * 3;\r\n  //get the most left column of the square\r\n  var tempColumn = Math.floor(column / 3);\r\n  tempColumn = tempColumn * 3;\r\n\r\n  for (var i = tempRow; i < tempRow + 3; i++) {\r\n    for (var j = tempColumn; j < tempColumn + 3; j++) {\r\n      if (board[i][j] === value) return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function CheckValue(board, row, column, value) {\r\n  /*\r\n    this function takes the value and checks the row, column\r\n    and sqaure to check for conflicts, if there are any conflicts\r\n    then it will return false, otherwise it returns true\r\n    */\r\n\r\n  if (\r\n    CheckRow(board, row, value) &&\r\n    CheckColumn(board, column, value) &&\r\n    CheckSquare(board, row, column, value)\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n/* Contains the functions used to generate the board.\r\n */\r\n\r\nlet counter; //global counter for termination if board generation takes too long\r\n\r\nconst numArr = [1, 2, 3, 4, 5, 6, 7, 8, 9]; //the numbers that can be placed on the board.\r\n\r\nexport function NextStillEmptySpot(board, emptySpotArr) {\r\n  //updates the emptySpotArr with cells that are still empty\r\n  //helps the fillFromArray solve the board at question, quicker\r\n  for (var i = 0; i < emptySpotArr.length; i++) {\r\n    if (board[emptySpotArr[i].row][emptySpotArr[i].col] === 0)\r\n      return { row: emptySpotArr[i].row, col: emptySpotArr[i].col };\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function EmptySpotCoords(proposedBoard) {\r\n  //finds the empty spots on the propesed board and stores their\r\n  //location in the emptySpotArr, this helps the FillFromArray solve\r\n  //the proposed board quicker\r\n  let returnArr = [];\r\n  for (var i = 0; i < 9; i++) {\r\n    for (var j = 0; j < 9; j++) {\r\n      if (0 === proposedBoard[i][j]) {\r\n        returnArr.push({\r\n          row: i,\r\n          col: j,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return returnArr;\r\n}\r\n\r\nexport function Shuffle(arr) {\r\n  //randomly shuffles an array's contents\r\n  let newArr = [...arr];\r\n  for (let i = newArr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n  }\r\n  return newArr;\r\n}\r\n\r\nexport const RangeOfNum = (start, end) => {\r\n  //returns a range of numbers, this ensures that each spot only gets checked once\r\n  //in the ValueRemover function\r\n  const length = end - start + 1;\r\n  return Array.from({ length }, (_, i) => start + i);\r\n};\r\n\r\nexport function GetRandomNumber(min, max) {\r\n  //gets a random number between the min and max value\r\n  //helps get a random value and row / column\r\n  //also used to randomly pick a number of tiles to remove in a range\r\n  min = Math.ceil(min);\r\n  max = max + 1;\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nexport function FillBoard(initialBoard) {\r\n  //Fills the empty board as long as it follows the rules of the game\r\n  //uses recursion and a backtracking algorithm, so if the next number can't get placed\r\n  //it returns false and backtracks to the last tile and tries a different number.\r\n\r\n  //get the next empty tile\r\n  let nextEmptySpot = EmptySpot(initialBoard);\r\n  let row = nextEmptySpot[0]; //index 0 corresponds to the row\r\n  let column = nextEmptySpot[1]; //index 1 corresponds to the column\r\n\r\n  //there is no more spots left to be assigned\r\n  if (row === -1) return initialBoard;\r\n\r\n  //shuffle the numArr to get a random order\r\n  let randNumArr = Shuffle(numArr);\r\n  let num;\r\n\r\n  //loop for the length of the randNumArr\r\n  for (num of randNumArr) {\r\n    // counter is a global variable tracking the iterations performed\r\n    // every so often it could cause heavy backtracking\r\n    counter++;\r\n    if (counter > 20_000_000) throw new Error(\"Recursion Timeout\");\r\n\r\n    if (CheckValue(initialBoard, row, column, num)) {\r\n      //if returns true, set the value at that position equal to true\r\n      initialBoard[row][column] = num;\r\n      //recursivley call the backtracking function\r\n      if (FillBoard(initialBoard)) {\r\n        return initialBoard;\r\n      }\r\n      //if we were unable to place the future num, that num was wrong.\r\n      //reset it to zero and try next number\r\n      initialBoard[row][column] = 0;\r\n    }\r\n  }\r\n  //if unable to place any number, return false, this makes the previous round try the next number\r\n  return false;\r\n}\r\n\r\nexport function FillFromArray(board, emptySpotArr) {\r\n  /*  This functions attempts to solve the puzzle by placing the values\r\n    into the board in order from the emptySpotArr \r\n*/\r\n  //get the next empty spot\r\n  const emptySpot = NextStillEmptySpot(board, emptySpotArr);\r\n\r\n  //if no emptyspots return the solved board\r\n  if (!emptySpot) return board;\r\n\r\n  for (var num = 1; num <= 9; num++) {\r\n    //if iterations exceed the value then throw error, and try again\r\n    //do this because not all boards can be impossible game boards\r\n    counter++;\r\n    if (counter > 60_000_000) throw new Error(\"Removal Timeout\");\r\n    if (CheckValue(board, emptySpot.row, emptySpot.col, num)) {\r\n      board[emptySpot.row][emptySpot.col] = num;\r\n      if (FillFromArray(board, emptySpotArr)) {\r\n        return board;\r\n      }\r\n      board[emptySpot.row][emptySpot.col] = 0;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport const ValueRemover = (initialBoard, k) => {\r\n  /* this function takes the board in and the amount of tiles to remove\r\n    and then removed a value one at a time and checks to see if the board is still \r\n    solvable, k is the number of tiles to removed*/\r\n  const removedVals = [];\r\n  const val = Shuffle(RangeOfNum(0, 80));\r\n\r\n  while (removedVals.length < k) {\r\n    const nextVal = val.pop(); //gets the next random num between 0-80\r\n    //not all gameboards can be impossible or expert games, so if its exhausts all the possible\r\n    //values to remove then throw an error\r\n    if (nextVal === undefined) throw new Error(\"Impossible Game\");\r\n    const randRow = Math.floor(nextVal / 9); //row = math.floor((0-80 / 9)), get the rand row\r\n    const randCol = nextVal % 9; //col = (0-80) % 9, gets the modulus of the random number\r\n\r\n    //guarding against possibly cloning\r\n    if (!initialBoard[randRow]) continue;\r\n    if (initialBoard[randRow][randCol] === 0) continue; //if value is already removed, continue\r\n\r\n    removedVals.push({\r\n      //store the current value at the given coordinates\r\n      row: randRow,\r\n      col: randCol,\r\n      val: initialBoard[randRow][randCol],\r\n    });\r\n\r\n    initialBoard[randRow][randCol] = 0; //remove the value at that spot\r\n    const proposedBoard = JSON.parse(JSON.stringify(initialBoard)); //clone the new updated board\r\n\r\n    /* Attempt to solve the board after removing the value, if it cannot be solved,\r\n        or if it has more than one solution then remove that option from the list */\r\n\r\n    //call moreThanOneSolution on the proposed board\r\n    if (moreThanOneSolution(proposedBoard)) {\r\n      //if there is more than one solution, then pop the last tile from the list and\r\n      //add it back to the board\r\n      initialBoard[randRow][randCol] = removedVals.pop().val;\r\n    }\r\n  }\r\n\r\n  return [removedVals, initialBoard];\r\n};\r\n\r\nexport function moreThanOneSolution(proposedBoard) {\r\n  /*  the board passed in will be solved completly for each item in the empty spot list\r\n    the empty spot array is rotated on each iteration to ensure that the order of the empty cells\r\n    and the order of solving the game is different each time.\r\n    The solution for each attempt is pushed to a possibleSolutions array as a string to keep\r\n    track of how many possible solutions there are. If there is more than one solution at any point it will\r\n    return true, thus prompting the removeVals function to try a different value\r\n*/\r\n  const possibleSolutions = []; //intialize the proposedSolutions list\r\n  const emptySpotArr = EmptySpotCoords(proposedBoard); //get the coords of the empty spots from the proposed board\r\n  let emptySpotClone, thisSolution;\r\n\r\n  for (var index = 0; index < emptySpotArr.length; index++) {\r\n    //clone the emptySpotArr\r\n    emptySpotClone = [...emptySpotArr];\r\n    //rotate a clone of the emptySpotArr by one for each iteration\r\n    const startingPoint = emptySpotClone.splice(index, 1);\r\n    emptySpotClone.unshift(startingPoint[0]);\r\n    //save the solution from FillFromArray as this solution\r\n    thisSolution = FillFromArray(\r\n      JSON.parse(JSON.stringify(proposedBoard)),\r\n      emptySpotClone\r\n    );\r\n    //push the solution to possibleSolutions\r\n    possibleSolutions.push(thisSolution.join());\r\n    //if there is more than one solution, then return true\r\n    if (Array.from(new Set(possibleSolutions)).length > 1) return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport const NewFilledBoard = (_) => {\r\n  //get a copy of the BLANK_BOARD\r\n  const newBoard = JSON.parse(JSON.stringify(BLANK_BOARD));\r\n  //fill the empty board\r\n  FillBoard(newBoard);\r\n\r\n  return newBoard;\r\n};\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n/* Functions for generating boards for varying levels of difficulty */\r\n\r\n/* Function:    Generates Board of Beginner Diffuclty\r\n   Criteria:    Between 36 and 46 tiles must be initialized(displayed) with the board at start of game\r\n   Parameters:  None Required\r\n   Return:      List removedVals, 2D array startingBoard, 2D array finalBoard when board is valid\r\n                If error caught, return BeginnerBoardGenerator()\r\n*/\r\nexport function BeginnerBoardGenerator() {\r\n  let numTiles = GetRandomNumber(36, 46); //number of tiles to keep on a beginner level board\r\n  numTiles = 81 - numTiles; //total cells - tiles to keep = tiles to remove\r\n\r\n  try {\r\n    counter = 0;\r\n    let finalBoard = NewFilledBoard(); //final board equals the fully filled board\r\n\r\n    //copy the new filled board and remove values from it\r\n    //store the removed values to save for clues later\r\n    let [removedVals, startingBoard] = ValueRemover(\r\n      JSON.parse(JSON.stringify(finalBoard)),\r\n      numTiles\r\n    );\r\n\r\n    return [removedVals, startingBoard, finalBoard];\r\n  } catch (error) {\r\n    //if error is caught, recall the function\r\n    return BeginnerBoardGenerator();\r\n  }\r\n}\r\n\r\n/* Function:    Generates Board of Intermediate Diffuclty\r\n   Criteria:    Between 32 and 35 tiles must be initialized(displayed) with the board at start of game\r\n   Parameters:  None Required\r\n   Return:      List removedVals, 2D array startingBoard, 2D array finalBoard when board is valid\r\n                If error caught, return IntermediateBoardGenerator()\r\n*/\r\nexport function IntermediateBoardGenerator() {\r\n  let numTiles = GetRandomNumber(32, 35); //number of tiles to keep on a beginner level board\r\n  numTiles = 81 - numTiles; //total cells - tiles to keep = tiles to remove\r\n\r\n  try {\r\n    counter = 0;\r\n    let finalBoard = NewFilledBoard(); //final board equals the fully filled board\r\n\r\n    //copy the new filled board and remove values from it\r\n    //store the removed values to save for clues later\r\n    let [removedVals, startingBoard] = ValueRemover(\r\n      JSON.parse(JSON.stringify(finalBoard)),\r\n      numTiles\r\n    );\r\n\r\n    return [removedVals, startingBoard, finalBoard];\r\n  } catch (error) {\r\n    //if error is caught, recall the function\r\n    return IntermediateBoardGenerator();\r\n  }\r\n}\r\n\r\n/* Function:    Generates Board of Advanced Diffuclty\r\n   Criteria:    Between 28 and 31 tiles must be initialized(displayed) with the board at start of game\r\n   Parameters:  None Required\r\n   Return:      List removedVals, 2D array startingBoard, 2D array finalBoard when board is valid\r\n                If error caught, return AdvancedBoardGenerator()\r\n*/\r\nexport function AdvancedBoardGenerator() {\r\n  let numTiles = GetRandomNumber(28, 31); //number of tiles to keep on a beginner level board\r\n  numTiles = 81 - numTiles; //total cells - tiles to keep = tiles to remove\r\n\r\n  try {\r\n    counter = 0;\r\n    let finalBoard = NewFilledBoard(); //final board equals the fully filled board\r\n\r\n    //copy the new filled board and remove values from it\r\n    //store the removed values to save for clues later\r\n    let [removedVals, startingBoard] = ValueRemover(\r\n      JSON.parse(JSON.stringify(finalBoard)),\r\n      numTiles\r\n    );\r\n\r\n    return [removedVals, startingBoard, finalBoard];\r\n  } catch (error) {\r\n    //if error is caught, recall the function\r\n    return AdvancedBoardGenerator();\r\n  }\r\n}\r\n\r\n/* Function:    Generates Board of Expert Diffuclty\r\n   Criteria:    Between 17 and 27 tiles must be initialized(displayed) with the board at start of game\r\n   Parameters:  None Required\r\n   Return:      List removedVals, 2D array startingBoard, 2D array finalBoard when board is valid\r\n                If error caught, return ExpertBoardGenerator()\r\n*/\r\nexport function ExpertBoardGenerator() {\r\n  let numTiles = GetRandomNumber(17, 27); //number of tiles to keep on a beginner level board\r\n  numTiles = 81 - numTiles; //total cells - tiles to keep = tiles to remove\r\n\r\n  try {\r\n    counter = 0;\r\n    let finalBoard = NewFilledBoard(); //final board equals the fully filled board\r\n\r\n    //copy the new filled board and remove values from it\r\n    //store the removed values to save for clues later\r\n    let [removedVals, startingBoard] = ValueRemover(\r\n      JSON.parse(JSON.stringify(finalBoard)),\r\n      numTiles\r\n    );\r\n\r\n    return [removedVals, startingBoard, finalBoard];\r\n  } catch (error) {\r\n    //if error is caught, recall the function\r\n    return ExpertBoardGenerator();\r\n  }\r\n}\r\n\r\n//IMPORT STATEMENTS FOR DANIEL\r\n/*\r\nimport { NextStillEmptySpot, EmptySpotCoords, Shuffle, RangeOfNum, GetRandomNumber } from \"./BoardGenerator\";\r\nimport { BLANK_BOARD, CheckColumn, CheckRow, CheckSquare, CheckValue, EmptySpot } from './BoardGenerator';\r\nimport { FillBoard, FillFromArray, ValueRemover, moreThanOneSolution, NewFilledBoard } from './BoardGenerator';\r\nimport { BeginnerBoardGenerator, IntermediateBoardGenerator, AdvancedBoardGenerator, ExpertBoardGenerator } from \"./BoardGenerator\";\r\n*/\r\n","import {actionTypes} from \"./types\";\r\nimport { BeginnerBoardGenerator, IntermediateBoardGenerator, AdvancedBoardGenerator, ExpertBoardGenerator } from \"../utils/BoardGenerator\";\r\nimport {remainingValues} from '../utils/GetRemainingNums'\r\n\r\nlet [removedVals, startingBoard, finalBoard] = BeginnerBoardGenerator();\r\n\r\nexport const initialState = {\r\n  boardState: startingBoard,\r\n  initBoardState: startingBoard.map(inner => inner.slice()),\r\n  solvedBoardState: finalBoard,\r\n  removedVals: removedVals,\r\n  selectedTile: {\r\n    row: null,\r\n    col: null,\r\n    value: null,\r\n    unit: null,\r\n  },\r\n  remainingNums: remainingValues(startingBoard),\r\n  isSolved: false,\r\n  undoState: [startingBoard.map(copy => copy.slice())]\r\n};\r\n\r\n\r\nexport const gameBoardReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SELECT_TILE:\r\n      return{\r\n        ...state,\r\n        selectedTile:   action.selectedTile,\r\n      }\r\n    case actionTypes.UPDATE_TILE_VALUE:\r\n      return {\r\n        ...state,\r\n        boardState: action.boardState,\r\n        remainingNums: action.remainingNums,\r\n        selectedTile: action.selectedTile,\r\n        isSolved: action.isSolved,\r\n        undoState: state.undoState.concat(action.undoState),\r\n      }\r\n      case actionTypes.UNDO_MOVE:\r\n        return {\r\n          ...state,\r\n          boardState: action.boardState,\r\n          undoState: action.undoState\r\n        }\r\n    default:\r\n      break;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport {StoreProvider} from './store/Store';\r\nimport {initialState, gameBoardReducer} from './store/GameReducer';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StoreProvider initialState={initialState} reducer={gameBoardReducer}>\r\n      <App />\r\n    </StoreProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}